import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.ByteBuffer;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class OTPApp {
    private static final AuthService authService = new AuthService();
    private static byte[] secretKey;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        User currentUser = null;

        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
        while (currentUser == null) {
            System.out.println("=== –ú–µ–Ω—é ===");
            System.out.println("1. –í—Ö–æ–¥");
            System.out.println("2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            int action = scanner.nextInt();
            scanner.nextLine();

            switch (action) {
                case 1:
                    currentUser = login(scanner);
                    break;
                case 2:
                    registerUser(scanner, null);
                    break;
                default:
                    System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TOTP
        TOTPGenerator otpGenerator = initTOTP(scanner, currentUser);

        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏)
        while (true) {
            if (currentUser.isAdmin()) {
                showAdminMenu(scanner, otpGenerator, currentUser);
            } else {
                showUserMenu(scanner, otpGenerator);
            }
        }
    }

    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    private static User login(Scanner scanner) {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        User user = authService.authenticate(username, password);
        if (user == null) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!");
        } else {
            System.out.println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + user.getUsername() + "!");
        }
        return user;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    private static void registerUser(Scanner scanner, User creator) {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        boolean isAdmin = false;
        if (creator != null && creator.isAdmin()) {
            System.out.print("–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? (y/n): ");
            isAdmin = scanner.nextLine().equalsIgnoreCase("y");
        }

        boolean success = authService.register(username, password, isAdmin, creator);
        if (success) {
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)");
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TOTP
    private static TOTPGenerator initTOTP(Scanner scanner, User user) {
        if (user.isAdmin()) {
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á");
            System.out.println("2. –í–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                secretKey = TOTPGenerator.generateSecretKey();
                System.out.println("üîí –ö–ª—é—á: " + TOTPGenerator.bytesToBase32(secretKey));
            } else {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (Base32): ");
                String base32Key = scanner.nextLine();
                secretKey = TOTPGenerator.base32ToBytes(base32Key);
            }
        } else {
            secretKey = TOTPGenerator.generateSecretKey();
        }
        return new TOTPGenerator(secretKey);
    }

    // –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private static void showUserMenu(Scanner scanner, TOTPGenerator otpGenerator) {
        System.out.println("\n=== –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
        System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
        System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
        System.out.println("3. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                System.out.println("üîÑ OTP: " + otpGenerator.generateTOTP());
                break;
            case 2:
                System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                String code = scanner.nextLine();
                System.out.println(otpGenerator.validateTOTP(code) ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                break;
            case 3:
                System.exit(0);
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
        }
    }

    // –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    private static void showAdminMenu(Scanner scanner, TOTPGenerator otpGenerator, User admin) {
        System.out.println("\n=== –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===");
        System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
        System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
        System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á");
        System.out.println("4. –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á");
        System.out.println("5. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        System.out.println("6. –í—ã—Ö–æ–¥");
        System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                System.out.println("üîÑ OTP: " + otpGenerator.generateTOTP());
                break;
            case 2:
                System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                String code = scanner.nextLine();
                System.out.println(otpGenerator.validateTOTP(code) ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                break;
            case 3:
                System.out.println("üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á: " + TOTPGenerator.bytesToBase32(secretKey));
                break;
            case 4:
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á (Base32): ");
                String newKey = scanner.nextLine();
                secretKey = TOTPGenerator.base32ToBytes(newKey);
                System.out.println("üîë –ö–ª—é—á –∏–∑–º–µ–Ω–µ–Ω!");
                break;
            case 5:
                registerUser(scanner, admin);
                break;
            case 6:
                System.exit(0);
            default:
                System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
        }
    }
}