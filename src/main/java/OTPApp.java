import java.sql.*;
import java.util.Scanner;

public class OTPApp {
    private static final AuthService authService = new AuthService();
    private static byte[] secretKey;

    public static void main(String[] args) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            DatabaseManager.initializeDatabase();
            Scanner scanner = new Scanner(System.in);
            User currentUser = null;

            // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö OTP-–∫–æ–¥–æ–≤
            try {
                OTPService.cleanupExpiredOTPs();
            } catch (SQLException e) {
                System.out.println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ OTP-–∫–æ–¥—ã: " + e.getMessage());
            }

            // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
            while (currentUser == null) {
                System.out.println("=== –ú–µ–Ω—é ===");
                System.out.println("1. –í—Ö–æ–¥");
                System.out.println("2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

                try {
                    int action = Integer.parseInt(scanner.nextLine());

                    switch (action) {
                        case 1:
                            currentUser = login(scanner);
                            break;
                        case 2:
                            registerUser(scanner, null);
                            break;
                        default:
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TOTP
            TOTPGenerator otpGenerator = initTOTP(scanner, currentUser);
            int currentUserId = getUserId(currentUser.getUsername());

            if (currentUserId == -1) {
                throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
            }

            // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏)
            while (true) {
                if (currentUser.isAdmin()) {
                    showAdminMenu(scanner, otpGenerator, currentUser, currentUserId);
                } else {
                    showUserMenu(scanner, otpGenerator, currentUserId);
                }
            }

        } catch (Exception e) {
            System.err.println("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static User login(Scanner scanner) {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        User user = authService.authenticate(username, password);
        if (user == null) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!");
            return null;
        }
        System.out.println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + user.getUsername() + "!");
        return user;
    }

    private static void registerUser(Scanner scanner, User creator) {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        boolean isAdmin = false;
        if (creator != null && creator.isAdmin()) {
            System.out.print("–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? (y/n): ");
            isAdmin = scanner.nextLine().equalsIgnoreCase("y");
        }

        try {
            boolean success = authService.register(username, password, isAdmin, creator);
            if (success) {
                System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
            } else {
                System.out.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)");
            }
        } catch (Exception e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    private static TOTPGenerator initTOTP(Scanner scanner, User user) throws SQLException {
        int userId = getUserId(user.getUsername());
        if (userId == -1) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î");
        }

        if (user.isAdmin()) {
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á");
            System.out.println("2. –í–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = Integer.parseInt(scanner.nextLine());

            if (choice == 1) {
                secretKey = TOTPGenerator.generateSecretKey();
                OTPStorage.saveSecretKey(userId, secretKey);
                System.out.println("üîí –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: " + TOTPGenerator.bytesToBase32(secretKey));
            } else {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (Base32): ");
                String base32Key = scanner.nextLine();
                secretKey = TOTPGenerator.base32ToBytes(base32Key);
                OTPStorage.saveSecretKey(userId, secretKey);
            }
        } else {
            secretKey = OTPStorage.getSecretKey(userId);
            if (secretKey == null) {
                secretKey = TOTPGenerator.generateSecretKey();
                OTPStorage.saveSecretKey(userId, secretKey);
            }
        }
        return new TOTPGenerator(secretKey);
    }

    private static int getUserId(String username) throws SQLException {
        String sql = "SELECT id FROM users WHERE username = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, username);
            ResultSet rs = stmt.executeQuery();
            return rs.next() ? rs.getInt("id") : -1;
        }
    }

    private static void showUserMenu(Scanner scanner, TOTPGenerator otpGenerator, int userId) {
        while (true) {
            System.out.println("\n=== –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
            System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
            System.out.println("3. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());

                switch (choice) {
                    case 1:
                        String otp = otpGenerator.generateAndSaveTOTP(userId);
                        System.out.println("üîÑ OTP: " + otp);
                        break;
                    case 2:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                        String code = scanner.nextLine();
                        boolean isValid = otpGenerator.validateAndMarkUsed(userId, code);
                        System.out.println(isValid ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                        break;
                    case 3:
                        System.exit(0);
                    default:
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private static void showAdminMenu(Scanner scanner, TOTPGenerator otpGenerator, User admin, int adminId) {
        while (true) {
            System.out.println("\n=== –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===");
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
            System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
            System.out.println("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á");
            System.out.println("4. –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á");
            System.out.println("5. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("6. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é OTP");
            System.out.println("7. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());

                switch (choice) {
                    case 1:
                        String otp = otpGenerator.generateAndSaveTOTP(adminId);
                        System.out.println("üîÑ OTP: " + otp);
                        break;
                    case 2:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                        String code = scanner.nextLine();
                        boolean isValid = otpGenerator.validateAndMarkUsed(adminId, code);
                        System.out.println(isValid ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                        break;
                    case 3:
                        System.out.println("üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á: " + TOTPGenerator.bytesToBase32(secretKey));
                        break;
                    case 4:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á (Base32): ");
                        String newKey = scanner.nextLine();
                        secretKey = TOTPGenerator.base32ToBytes(newKey);
                        OTPStorage.saveSecretKey(adminId, secretKey);
                        System.out.println("üîë –ö–ª—é—á –∏–∑–º–µ–Ω—ë–Ω!");
                        break;
                    case 5:
                        registerUser(scanner, admin);
                        break;
                    case 6:
                        showOTPHistory();
                        break;
                    case 7:
                        System.exit(0);
                    default:
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private static void showOTPHistory() {
        try {
            String sql = "SELECT u.username, o.code, o.generation_time, o.is_used " +
                    "FROM otp_codes o " +
                    "JOIN users u ON o.user_id = u.id " +
                    "ORDER BY o.generation_time DESC LIMIT 10";

            try (Connection conn = DatabaseManager.getConnection();
                 Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                System.out.println("\n=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 OTP-–∫–æ–¥–æ–≤ ===");
                System.out.printf("%-15s %-10s %-25s %-10s%n",
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–æ–¥", "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");

                while (rs.next()) {
                    System.out.printf("%-15s %-10s %-25s %-10s%n",
                            rs.getString("username"),
                            rs.getString("code"),
                            rs.getTimestamp("generation_time"),
                            rs.getBoolean("is_used") ? "–î–∞" : "–ù–µ—Ç");
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }
}