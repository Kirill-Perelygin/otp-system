import java.sql.*;
import java.util.Scanner;
import javax.mail.MessagingException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.jsmpp.bean.*;

public class OTPApp {
    private static final AuthService authService = new AuthService();
    private static byte[] secretKey;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
    private static final String SMTP_HOST = "smtp.gmail.com";
    private static final int SMTP_PORT = 587;
    private static final String EMAIL_USERNAME = "your.email@gmail.com";
    private static final String EMAIL_PASSWORD = "yourpassword";
    private static final boolean USE_TLS = true;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMPP
    private static final String SMPP_HOST = "smpp.example.com";
    private static final int SMPP_PORT = 2775;
    private static final String SMPP_SYSTEM_ID = "your_smpp_login";
    private static final String SMPP_PASSWORD = "your_smpp_password";
    private static final String SMPP_SOURCE_ADDR = "OTPService";

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
    private static final String TELEGRAM_BOT_TOKEN = "–≤–∞—à_bot_token";
    private static final String TELEGRAM_BOT_USERNAME = "–≤–∞—à_bot_username";

    private static EmailService emailService;
    private static SmppService smppService;
    private static TelegramService telegramService;

    public static void main(String[] args) {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            DatabaseManager.initializeDatabase();
            emailService = new EmailService(SMTP_HOST, SMTP_PORT, EMAIL_USERNAME, EMAIL_PASSWORD, USE_TLS);
            smppService = new SmppService(
                    SMPP_HOST, SMPP_PORT, SMPP_SYSTEM_ID, SMPP_PASSWORD,
                    "", TypeOfNumber.INTERNATIONAL, NumberingPlanIndicator.ISDN,
                    SMPP_SOURCE_ADDR);
            telegramService = new TelegramService(TELEGRAM_BOT_TOKEN, TELEGRAM_BOT_USERNAME);

            Scanner scanner = new Scanner(System.in);
            User currentUser = null;

            // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö OTP
            OTPService.cleanupExpiredOTPs();

            // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
            while (currentUser == null) {
                System.out.println("=== –ú–µ–Ω—é ===");
                System.out.println("1. –í—Ö–æ–¥");
                System.out.println("2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

                try {
                    int action = Integer.parseInt(scanner.nextLine());

                    switch (action) {
                        case 1:
                            currentUser = login(scanner);
                            break;
                        case 2:
                            registerUser(scanner, null);
                            break;
                        default:
                            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!");
                }
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TOTP
            TOTPGenerator otpGenerator = initTOTP(scanner, currentUser);

            // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            while (true) {
                if (currentUser.isAdmin()) {
                    showAdminMenu(scanner, otpGenerator, currentUser);
                } else {
                    showUserMenu(scanner, otpGenerator, currentUser);
                }
            }

        } catch (Exception e) {
            System.err.println("üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static User login(Scanner scanner) throws SQLException {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();

        User user = authService.authenticate(username, password);
        if (user == null) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å!");
            return null;
        }
        System.out.println("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + user.getUsername() + "!");
        return user;
    }

    private static void registerUser(Scanner scanner, User creator) throws SQLException {
        System.out.print("–õ–æ–≥–∏–Ω: ");
        String username = scanner.nextLine();
        System.out.print("–ü–∞—Ä–æ–ª—å: ");
        String password = scanner.nextLine();
        System.out.print("Email: ");
        String email = scanner.nextLine();
        System.out.print("–¢–µ–ª–µ—Ñ–æ–Ω (79123456789): ");
        String phone = scanner.nextLine();
        System.out.print("Telegram Chat ID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ");
        String telegramChatId = scanner.nextLine();

        if (!validatePhoneNumber(phone)) {
            System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!");
            return;
        }

        boolean isAdmin = false;
        if (creator != null && creator.isAdmin()) {
            System.out.print("–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º? (y/n): ");
            isAdmin = scanner.nextLine().equalsIgnoreCase("y");
        }

        boolean success = authService.register(username, password, email, phone, telegramChatId, isAdmin, creator);
        if (success) {
            System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!");
        } else {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ª–æ–≥–∏–Ω –∑–∞–Ω—è—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)");
        }
    }

    private static boolean validatePhoneNumber(String phone) {
        return phone.matches("^7\\d{10}$");
    }

    private static TOTPGenerator initTOTP(Scanner scanner, User user) throws SQLException {
        if (user.isAdmin()) {
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á");
            System.out.println("2. –í–≤–µ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            int choice = Integer.parseInt(scanner.nextLine());

            if (choice == 1) {
                secretKey = TOTPGenerator.generateSecretKey();
                OTPStorage.saveSecretKey(user.getId(), secretKey);
                System.out.println("üîí –ö–ª—é—á —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î: " + TOTPGenerator.bytesToBase32(secretKey));
            } else {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (Base32): ");
                String base32Key = scanner.nextLine();
                secretKey = TOTPGenerator.base32ToBytes(base32Key);
                OTPStorage.saveSecretKey(user.getId(), secretKey);
            }
        } else {
            secretKey = OTPStorage.getSecretKey(user.getId());
            if (secretKey == null) {
                secretKey = TOTPGenerator.generateSecretKey();
                OTPStorage.saveSecretKey(user.getId(), secretKey);
            }
        }
        return new TOTPGenerator(secretKey);
    }

    private static void showUserMenu(Scanner scanner, TOTPGenerator otpGenerator, User user) {
        while (true) {
            System.out.println("\n=== –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===");
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
            System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
            System.out.println("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –Ω–∞ email");
            System.out.println("4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –ø–æ SMS");
            System.out.println("5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –≤ Telegram");
            System.out.println("6. –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç");
            System.out.println("7. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());
                String otp;

                switch (choice) {
                    case 1:
                        otp = otpGenerator.generateAndSaveTOTP(user.getId());
                        System.out.println("üîÑ OTP: " + otp);
                        break;
                    case 2:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                        String code = scanner.nextLine();
                        boolean isValid = otpGenerator.validateAndMarkUsed(user.getId(), code);
                        System.out.println(isValid ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                        break;
                    case 3:
                        otp = otpGenerator.generateAndSaveTOTP(user.getId());
                        try {
                            emailService.sendEmail(user.getEmail(), "–í–∞—à OTP –∫–æ–¥",
                                    "–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: " + otp + "\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç");
                            System.out.println("‚úâÔ∏è OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ " + user.getEmail());
                        } catch (MessagingException e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + e.getMessage());
                        }
                        break;
                    case 4:
                        otp = otpGenerator.generateAndSaveTOTP(user.getId());
                        try {
                            smppService.sendSms(user.getPhone(),
                                    "–í–∞—à OTP –∫–æ–¥: " + otp + "\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç");
                            System.out.println("üì± OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä " + user.getPhone());
                        } catch (Exception e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: " + e.getMessage());
                        }
                        break;
                    case 5:
                        if (user.getTelegramChatId() == null || user.getTelegramChatId().isEmpty()) {
                            System.out.println("‚ùå Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω");
                            break;
                        }
                        otp = otpGenerator.generateAndSaveTOTP(user.getId());
                        try {
                            telegramService.sendOTP(user.getTelegramChatId(), otp);
                            System.out.println("üì® OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram");
                        } catch (TelegramApiException e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: " + e.getMessage());
                        }
                        break;
                    case 6:
                        bindTelegramAccount(scanner, user.getId());
                        break;
                    case 7:
                        System.exit(0);
                    default:
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private static void bindTelegramAccount(Scanner scanner, int userId) throws SQLException {
        System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Chat ID: ");
        String chatId = scanner.nextLine();

        String sql = "UPDATE users SET telegram_chat_id = ? WHERE id = ?";
        try (Connection conn = DatabaseManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setString(1, chatId);
            stmt.setInt(2, userId);
            stmt.executeUpdate();
            System.out.println("‚úÖ Telegram –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω");
        }
    }

    private static void showAdminMenu(Scanner scanner, TOTPGenerator otpGenerator, User admin) {
        while (true) {
            System.out.println("\n=== –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ===");
            System.out.println("1. –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å OTP");
            System.out.println("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å OTP");
            System.out.println("3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –Ω–∞ email");
            System.out.println("4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –ø–æ SMS");
            System.out.println("5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å OTP –≤ Telegram");
            System.out.println("6. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–ª—é—á");
            System.out.println("7. –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª—é—á");
            System.out.println("8. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
            System.out.println("9. –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é OTP");
            System.out.println("10. –í—ã—Ö–æ–¥");
            System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            try {
                int choice = Integer.parseInt(scanner.nextLine());
                String otp;

                switch (choice) {
                    case 1:
                        otp = otpGenerator.generateAndSaveTOTP(admin.getId());
                        System.out.println("üîÑ OTP: " + otp);
                        break;
                    case 2:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ OTP: ");
                        String code = scanner.nextLine();
                        boolean isValid = otpGenerator.validateAndMarkUsed(admin.getId(), code);
                        System.out.println(isValid ? "‚úÖ –í–µ—Ä–Ω–æ!" : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!");
                        break;
                    case 3:
                        otp = otpGenerator.generateAndSaveTOTP(admin.getId());
                        try {
                            emailService.sendEmail(admin.getEmail(), "–í–∞—à OTP –∫–æ–¥",
                                    "–í–∞—à –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥: " + otp + "\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç");
                            System.out.println("‚úâÔ∏è OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ " + admin.getEmail());
                        } catch (MessagingException e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + e.getMessage());
                        }
                        break;
                    case 4:
                        otp = otpGenerator.generateAndSaveTOTP(admin.getId());
                        try {
                            smppService.sendSms(admin.getPhone(),
                                    "–í–∞—à OTP –∫–æ–¥: " + otp + "\n–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç");
                            System.out.println("üì± OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä " + admin.getPhone());
                        } catch (Exception e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: " + e.getMessage());
                        }
                        break;
                    case 5:
                        if (admin.getTelegramChatId() == null || admin.getTelegramChatId().isEmpty()) {
                            System.out.println("‚ùå Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω");
                            break;
                        }
                        otp = otpGenerator.generateAndSaveTOTP(admin.getId());
                        try {
                            telegramService.sendOTP(admin.getTelegramChatId(), otp);
                            System.out.println("üì® OTP –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram");
                        } catch (TelegramApiException e) {
                            System.out.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: " + e.getMessage());
                        }
                        break;
                    case 6:
                        System.out.println("üîë –¢–µ–∫—É—â–∏–π –∫–ª—é—á: " + TOTPGenerator.bytesToBase32(secretKey));
                        break;
                    case 7:
                        System.out.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á (Base32): ");
                        String newKey = scanner.nextLine();
                        secretKey = TOTPGenerator.base32ToBytes(newKey);
                        OTPStorage.saveSecretKey(admin.getId(), secretKey);
                        System.out.println("üîë –ö–ª—é—á –∏–∑–º–µ–Ω—ë–Ω!");
                        break;
                    case 8:
                        registerUser(scanner, admin);
                        break;
                    case 9:
                        showOTPHistory();
                        break;
                    case 10:
                        System.exit(0);
                    default:
                        System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                }
            } catch (Exception e) {
                System.out.println("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }
    }

    private static void showOTPHistory() {
        try {
            String sql = "SELECT u.username, o.code, o.generation_time, o.is_used " +
                    "FROM otp_codes o " +
                    "JOIN users u ON o.user_id = u.id " +
                    "ORDER BY o.generation_time DESC LIMIT 10";

            try (Connection conn = DatabaseManager.getConnection();
                 Statement stmt = conn.createStatement();
                 ResultSet rs = stmt.executeQuery(sql)) {

                System.out.println("\n=== –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 OTP-–∫–æ–¥–æ–≤ ===");
                System.out.printf("%-15s %-10s %-25s %-10s%n",
                        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ö–æ–¥", "–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω");

                while (rs.next()) {
                    System.out.printf("%-15s %-10s %-25s %-10s%n",
                            rs.getString("username"),
                            rs.getString("code"),
                            rs.getTimestamp("generation_time"),
                            rs.getBoolean("is_used") ? "–î–∞" : "–ù–µ—Ç");
                }
            }
        } catch (SQLException e) {
            System.out.println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: " + e.getMessage());
        }
    }
}